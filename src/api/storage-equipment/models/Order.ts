/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Equipment Management API
 * Storage Equipment management for hospital
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xskrabakf@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrderItem } from './OrderItem';
import {
    OrderItemFromJSON,
    OrderItemFromJSONTyped,
    OrderItemToJSON,
} from './OrderItem';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * Unique identifier for the order
     * @type {string}
     * @memberof Order
     */
    id: string;
    /**
     * List of equipment items requested in this order
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    items: Array<OrderItem>;
    /**
     * Name or ID of the staff member who created the order
     * @type {string}
     * @memberof Order
     */
    requestedBy: string;
    /**
     * Department that requested the equipment
     * @type {string}
     * @memberof Order
     */
    requestorDepartment?: string;
    /**
     * Current status of the order
     * @type {string}
     * @memberof Order
     */
    status: OrderStatusEnum;
    /**
     * Additional notes about the order
     * @type {string}
     * @memberof Order
     */
    notes?: string;
    /**
     * Date and time when the order was created
     * @type {Date}
     * @memberof Order
     */
    createdAt: Date;
    /**
     * Date and time when the order was last updated
     * @type {Date}
     * @memberof Order
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const OrderStatusEnum = {
    Pending: 'pending',
    Delivered: 'delivered',
    Cancelled: 'cancelled'
} as const;
export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];


/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "requestedBy" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'items': ((json['items'] as Array<any>).map(OrderItemFromJSON)),
        'requestedBy': json['requestedBy'],
        'requestorDepartment': !exists(json, 'requestorDepartment') ? undefined : json['requestorDepartment'],
        'status': json['status'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'items': ((value.items as Array<any>).map(OrderItemToJSON)),
        'requestedBy': value.requestedBy,
        'requestorDepartment': value.requestorDepartment,
        'status': value.status,
        'notes': value.notes,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

