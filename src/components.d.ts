/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EquipmentItem } from "./api/storage-equipment/models";
import { Order } from "./api/storage-equipment";
export { EquipmentItem } from "./api/storage-equipment/models";
export { Order } from "./api/storage-equipment";
export namespace Components {
    interface SteqApp {
        "apiBase": string;
        "basePath": string;
    }
    interface SteqEquipmentDetail {
        "equipmentId": string;
    }
    interface SteqEquipmentForm {
        "equipment"?: EquipmentItem;
    }
    interface SteqEquipmentList {
    }
    interface SteqOrderDetail {
        "orderId": string;
    }
    interface SteqOrderForm {
        "order"?: Order;
    }
    interface SteqOrderList {
    }
}
export interface SteqEquipmentDetailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSteqEquipmentDetailElement;
}
export interface SteqEquipmentFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSteqEquipmentFormElement;
}
export interface SteqOrderDetailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSteqOrderDetailElement;
}
export interface SteqOrderFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSteqOrderFormElement;
}
declare global {
    interface HTMLSteqAppElement extends Components.SteqApp, HTMLStencilElement {
    }
    var HTMLSteqAppElement: {
        prototype: HTMLSteqAppElement;
        new (): HTMLSteqAppElement;
    };
    interface HTMLSteqEquipmentDetailElementEventMap {
        "back": any;
    }
    interface HTMLSteqEquipmentDetailElement extends Components.SteqEquipmentDetail, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSteqEquipmentDetailElementEventMap>(type: K, listener: (this: HTMLSteqEquipmentDetailElement, ev: SteqEquipmentDetailCustomEvent<HTMLSteqEquipmentDetailElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSteqEquipmentDetailElementEventMap>(type: K, listener: (this: HTMLSteqEquipmentDetailElement, ev: SteqEquipmentDetailCustomEvent<HTMLSteqEquipmentDetailElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSteqEquipmentDetailElement: {
        prototype: HTMLSteqEquipmentDetailElement;
        new (): HTMLSteqEquipmentDetailElement;
    };
    interface HTMLSteqEquipmentFormElementEventMap {
        "cancel": any;
        "equipmentCreated": EquipmentItem;
        "equipmentUpdated": EquipmentItem;
    }
    interface HTMLSteqEquipmentFormElement extends Components.SteqEquipmentForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSteqEquipmentFormElementEventMap>(type: K, listener: (this: HTMLSteqEquipmentFormElement, ev: SteqEquipmentFormCustomEvent<HTMLSteqEquipmentFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSteqEquipmentFormElementEventMap>(type: K, listener: (this: HTMLSteqEquipmentFormElement, ev: SteqEquipmentFormCustomEvent<HTMLSteqEquipmentFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSteqEquipmentFormElement: {
        prototype: HTMLSteqEquipmentFormElement;
        new (): HTMLSteqEquipmentFormElement;
    };
    interface HTMLSteqEquipmentListElement extends Components.SteqEquipmentList, HTMLStencilElement {
    }
    var HTMLSteqEquipmentListElement: {
        prototype: HTMLSteqEquipmentListElement;
        new (): HTMLSteqEquipmentListElement;
    };
    interface HTMLSteqOrderDetailElementEventMap {
        "back": any;
    }
    interface HTMLSteqOrderDetailElement extends Components.SteqOrderDetail, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSteqOrderDetailElementEventMap>(type: K, listener: (this: HTMLSteqOrderDetailElement, ev: SteqOrderDetailCustomEvent<HTMLSteqOrderDetailElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSteqOrderDetailElementEventMap>(type: K, listener: (this: HTMLSteqOrderDetailElement, ev: SteqOrderDetailCustomEvent<HTMLSteqOrderDetailElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSteqOrderDetailElement: {
        prototype: HTMLSteqOrderDetailElement;
        new (): HTMLSteqOrderDetailElement;
    };
    interface HTMLSteqOrderFormElementEventMap {
        "cancel": any;
        "orderCreated": Order;
        "orderUpdated": Order;
    }
    interface HTMLSteqOrderFormElement extends Components.SteqOrderForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSteqOrderFormElementEventMap>(type: K, listener: (this: HTMLSteqOrderFormElement, ev: SteqOrderFormCustomEvent<HTMLSteqOrderFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSteqOrderFormElementEventMap>(type: K, listener: (this: HTMLSteqOrderFormElement, ev: SteqOrderFormCustomEvent<HTMLSteqOrderFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSteqOrderFormElement: {
        prototype: HTMLSteqOrderFormElement;
        new (): HTMLSteqOrderFormElement;
    };
    interface HTMLSteqOrderListElement extends Components.SteqOrderList, HTMLStencilElement {
    }
    var HTMLSteqOrderListElement: {
        prototype: HTMLSteqOrderListElement;
        new (): HTMLSteqOrderListElement;
    };
    interface HTMLElementTagNameMap {
        "steq-app": HTMLSteqAppElement;
        "steq-equipment-detail": HTMLSteqEquipmentDetailElement;
        "steq-equipment-form": HTMLSteqEquipmentFormElement;
        "steq-equipment-list": HTMLSteqEquipmentListElement;
        "steq-order-detail": HTMLSteqOrderDetailElement;
        "steq-order-form": HTMLSteqOrderFormElement;
        "steq-order-list": HTMLSteqOrderListElement;
    }
}
declare namespace LocalJSX {
    interface SteqApp {
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface SteqEquipmentDetail {
        "equipmentId"?: string;
        "onBack"?: (event: SteqEquipmentDetailCustomEvent<any>) => void;
    }
    interface SteqEquipmentForm {
        "equipment"?: EquipmentItem;
        "onCancel"?: (event: SteqEquipmentFormCustomEvent<any>) => void;
        "onEquipmentCreated"?: (event: SteqEquipmentFormCustomEvent<EquipmentItem>) => void;
        "onEquipmentUpdated"?: (event: SteqEquipmentFormCustomEvent<EquipmentItem>) => void;
    }
    interface SteqEquipmentList {
    }
    interface SteqOrderDetail {
        "onBack"?: (event: SteqOrderDetailCustomEvent<any>) => void;
        "orderId"?: string;
    }
    interface SteqOrderForm {
        "onCancel"?: (event: SteqOrderFormCustomEvent<any>) => void;
        "onOrderCreated"?: (event: SteqOrderFormCustomEvent<Order>) => void;
        "onOrderUpdated"?: (event: SteqOrderFormCustomEvent<Order>) => void;
        "order"?: Order;
    }
    interface SteqOrderList {
    }
    interface IntrinsicElements {
        "steq-app": SteqApp;
        "steq-equipment-detail": SteqEquipmentDetail;
        "steq-equipment-form": SteqEquipmentForm;
        "steq-equipment-list": SteqEquipmentList;
        "steq-order-detail": SteqOrderDetail;
        "steq-order-form": SteqOrderForm;
        "steq-order-list": SteqOrderList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "steq-app": LocalJSX.SteqApp & JSXBase.HTMLAttributes<HTMLSteqAppElement>;
            "steq-equipment-detail": LocalJSX.SteqEquipmentDetail & JSXBase.HTMLAttributes<HTMLSteqEquipmentDetailElement>;
            "steq-equipment-form": LocalJSX.SteqEquipmentForm & JSXBase.HTMLAttributes<HTMLSteqEquipmentFormElement>;
            "steq-equipment-list": LocalJSX.SteqEquipmentList & JSXBase.HTMLAttributes<HTMLSteqEquipmentListElement>;
            "steq-order-detail": LocalJSX.SteqOrderDetail & JSXBase.HTMLAttributes<HTMLSteqOrderDetailElement>;
            "steq-order-form": LocalJSX.SteqOrderForm & JSXBase.HTMLAttributes<HTMLSteqOrderFormElement>;
            "steq-order-list": LocalJSX.SteqOrderList & JSXBase.HTMLAttributes<HTMLSteqOrderListElement>;
        }
    }
}
