/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Equipment Management API
 * Storage Equipment management for hospital
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xskrabakf@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EquipmentCreate,
  EquipmentItem,
  EquipmentUpdate,
} from '../models';
import {
    EquipmentCreateFromJSON,
    EquipmentCreateToJSON,
    EquipmentItemFromJSON,
    EquipmentItemToJSON,
    EquipmentUpdateFromJSON,
    EquipmentUpdateToJSON,
} from '../models';

export interface CreateEquipmentRequest {
    equipmentCreate: EquipmentCreate;
}

export interface DeleteEquipmentRequest {
    equipmentId: string;
}

export interface GetEquipmentByIdRequest {
    equipmentId: string;
}

export interface UpdateEquipmentRequest {
    equipmentId: string;
    equipmentUpdate: EquipmentUpdate;
}

/**
 * EquipmentManagementApi - interface
 * 
 * @export
 * @interface EquipmentManagementApiInterface
 */
export interface EquipmentManagementApiInterface {
    /**
     * Add new equipment to the system
     * @summary Add new equipment
     * @param {EquipmentCreate} equipmentCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentManagementApiInterface
     */
    createEquipmentRaw(requestParameters: CreateEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentItem>>;

    /**
     * Add new equipment to the system
     * Add new equipment
     */
    createEquipment(requestParameters: CreateEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentItem>;

    /**
     * Remove equipment from the system
     * @summary Delete equipment
     * @param {string} equipmentId ID of the equipment to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentManagementApiInterface
     */
    deleteEquipmentRaw(requestParameters: DeleteEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove equipment from the system
     * Delete equipment
     */
    deleteEquipment(requestParameters: DeleteEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns list of all hospital equipment
     * @summary Get all equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentManagementApiInterface
     */
    getAllEquipmentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EquipmentItem>>>;

    /**
     * Returns list of all hospital equipment
     * Get all equipment
     */
    getAllEquipment(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EquipmentItem>>;

    /**
     * Returns specific equipment item by ID
     * @summary Get equipment by ID
     * @param {string} equipmentId ID of the equipment item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentManagementApiInterface
     */
    getEquipmentByIdRaw(requestParameters: GetEquipmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentItem>>;

    /**
     * Returns specific equipment item by ID
     * Get equipment by ID
     */
    getEquipmentById(requestParameters: GetEquipmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentItem>;

    /**
     * Update existing equipment information
     * @summary Update equipment
     * @param {string} equipmentId ID of the equipment to update
     * @param {EquipmentUpdate} equipmentUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentManagementApiInterface
     */
    updateEquipmentRaw(requestParameters: UpdateEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentItem>>;

    /**
     * Update existing equipment information
     * Update equipment
     */
    updateEquipment(requestParameters: UpdateEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentItem>;

}

/**
 * 
 */
export class EquipmentManagementApi extends runtime.BaseAPI implements EquipmentManagementApiInterface {

    /**
     * Add new equipment to the system
     * Add new equipment
     */
    async createEquipmentRaw(requestParameters: CreateEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentItem>> {
        if (requestParameters.equipmentCreate === null || requestParameters.equipmentCreate === undefined) {
            throw new runtime.RequiredError('equipmentCreate','Required parameter requestParameters.equipmentCreate was null or undefined when calling createEquipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/equipment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentCreateToJSON(requestParameters.equipmentCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentItemFromJSON(jsonValue));
    }

    /**
     * Add new equipment to the system
     * Add new equipment
     */
    async createEquipment(requestParameters: CreateEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentItem> {
        const response = await this.createEquipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove equipment from the system
     * Delete equipment
     */
    async deleteEquipmentRaw(requestParameters: DeleteEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling deleteEquipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipment/{equipmentId}`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove equipment from the system
     * Delete equipment
     */
    async deleteEquipment(requestParameters: DeleteEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEquipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Returns list of all hospital equipment
     * Get all equipment
     */
    async getAllEquipmentRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EquipmentItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EquipmentItemFromJSON));
    }

    /**
     * Returns list of all hospital equipment
     * Get all equipment
     */
    async getAllEquipment(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EquipmentItem>> {
        const response = await this.getAllEquipmentRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns specific equipment item by ID
     * Get equipment by ID
     */
    async getEquipmentByIdRaw(requestParameters: GetEquipmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentItem>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling getEquipmentById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/equipment/{equipmentId}`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentItemFromJSON(jsonValue));
    }

    /**
     * Returns specific equipment item by ID
     * Get equipment by ID
     */
    async getEquipmentById(requestParameters: GetEquipmentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentItem> {
        const response = await this.getEquipmentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing equipment information
     * Update equipment
     */
    async updateEquipmentRaw(requestParameters: UpdateEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EquipmentItem>> {
        if (requestParameters.equipmentId === null || requestParameters.equipmentId === undefined) {
            throw new runtime.RequiredError('equipmentId','Required parameter requestParameters.equipmentId was null or undefined when calling updateEquipment.');
        }

        if (requestParameters.equipmentUpdate === null || requestParameters.equipmentUpdate === undefined) {
            throw new runtime.RequiredError('equipmentUpdate','Required parameter requestParameters.equipmentUpdate was null or undefined when calling updateEquipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/equipment/{equipmentId}`.replace(`{${"equipmentId"}}`, encodeURIComponent(String(requestParameters.equipmentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentUpdateToJSON(requestParameters.equipmentUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentItemFromJSON(jsonValue));
    }

    /**
     * Update existing equipment information
     * Update equipment
     */
    async updateEquipment(requestParameters: UpdateEquipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EquipmentItem> {
        const response = await this.updateEquipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
