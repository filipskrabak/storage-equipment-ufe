/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Equipment Management API
 * Storage Equipment management for hospital
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xskrabakf@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Order,
  OrderCreate,
  OrderUpdate,
} from '../models';
import {
    OrderFromJSON,
    OrderToJSON,
    OrderCreateFromJSON,
    OrderCreateToJSON,
    OrderUpdateFromJSON,
    OrderUpdateToJSON,
} from '../models';

export interface CancelOrderRequest {
    orderId: string;
}

export interface CreateOrderRequest {
    orderCreate: OrderCreate;
}

export interface GetOrderByIdRequest {
    orderId: string;
}

export interface UpdateStatusRequest {
    orderId: string;
    orderUpdate: OrderUpdate;
}

/**
 * EquipmentOrdersApi - interface
 * 
 * @export
 * @interface EquipmentOrdersApiInterface
 */
export interface EquipmentOrdersApiInterface {
    /**
     * Cancel an order
     * @summary Cancel order
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentOrdersApiInterface
     */
    cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Cancel an order
     * Cancel order
     */
    cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Create a new order request for equipment due to shortage.
     * @summary Create a new equipment order
     * @param {OrderCreate} orderCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentOrdersApiInterface
     */
    createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Create a new order request for equipment due to shortage.
     * Create a new equipment order
     */
    createOrder(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Retrieve details of a specific order.
     * @summary Get order by ID
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentOrdersApiInterface
     */
    getOrderByIdRaw(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Retrieve details of a specific order.
     * Get order by ID
     */
    getOrderById(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Retrieve a list of all equipment orders.
     * @summary List all orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentOrdersApiInterface
     */
    listOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Order>>>;

    /**
     * Retrieve a list of all equipment orders.
     * List all orders
     */
    listOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Order>>;

    /**
     * Update an order
     * @summary Update order
     * @param {string} orderId 
     * @param {OrderUpdate} orderUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentOrdersApiInterface
     */
    updateStatusRaw(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Update an order
     * Update order
     */
    updateStatus(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

}

/**
 * 
 */
export class EquipmentOrdersApi extends runtime.BaseAPI implements EquipmentOrdersApiInterface {

    /**
     * Cancel an order
     * Cancel order
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel an order
     * Cancel order
     */
    async cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cancelOrderRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new order request for equipment due to shortage.
     * Create a new equipment order
     */
    async createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderCreate === null || requestParameters.orderCreate === undefined) {
            throw new runtime.RequiredError('orderCreate','Required parameter requestParameters.orderCreate was null or undefined when calling createOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateToJSON(requestParameters.orderCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Create a new order request for equipment due to shortage.
     * Create a new equipment order
     */
    async createOrder(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details of a specific order.
     * Get order by ID
     */
    async getOrderByIdRaw(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a specific order.
     * Get order by ID
     */
    async getOrderById(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.getOrderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all equipment orders.
     * List all orders
     */
    async listOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Order>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     * Retrieve a list of all equipment orders.
     * List all orders
     */
    async listOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Order>> {
        const response = await this.listOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an order
     * Update order
     */
    async updateStatusRaw(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateStatus.');
        }

        if (requestParameters.orderUpdate === null || requestParameters.orderUpdate === undefined) {
            throw new runtime.RequiredError('orderUpdate','Required parameter requestParameters.orderUpdate was null or undefined when calling updateStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUpdateToJSON(requestParameters.orderUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Update an order
     * Update order
     */
    async updateStatus(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
